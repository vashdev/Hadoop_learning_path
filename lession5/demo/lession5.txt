Let the smaple dat abe
Ln#,PaymentDate,$amount

Lets say we want the data to be ordered by loan number and then the date - so we have latest transaction for loan at top 

1) first thing is to write a Java class that we can pass to map-reduce that can take objects of this composite class. this class has to implement  WritableComparable

public class PaymentKey implements WritableComparable<PaymentKey> {
// the class variables are the composite key fields
 and then we have to provide get/set methods plys overwrite compareTo method

We can test our final class somethign liek this
public static void main( String[] args ) 
    {
	PaymentKey k1 = new PaymentKey(1,"20140712")	;
	PaymentKey k2 = new PaymentKey(1,"20140517");
	System.out.println("k1:"+k1);
	System.out.println("k2:"+k2);
	if(k1.compareTo(k2) >0 ) System.out.println("K1 is latest"); else System.out.println("k2 is latest");
    
    }
result:

k1:1=>20140712
k2:1=>20140517
K1 is latest

Now that we have a Writable comparable object to use as composite key we can tell mapper to emit this type of objects via driver program
job.setMapOutputKeyClass

2) Now we need to tell framework how to partition this composite key data
this is relatively simple as we just need to write a class to inherit from partitioner class and let framework know to use this as partitioner in driver program. Our partition class ignores the secoundary key since we need all loans to come to one reducer
public class NaturalKeyPartitioner extends Partitioner<PaymentKey, DoubleWritable> { ..}

job.setPartitionerClass(NaturalKeyPartitioner.class);

3) Next, Its Grouping the records based on keys : just like partitioner we want to group keys based on natural key
So extend WritableComparator and set it in job to use this class for grouping
public class NaturalKeyGroupingComparator extends WritableComparator { ..}
job.setGroupingComparatorClass(NaturalKeyGroupingComparator.class);

4) After grouping we need to sort based on composite key so we need to extend WritableComparator again and tell framework to use out class for sorting
public class CompositeKeyComparator extends WritableComparator { ..}

job.setSortComparatorClass(CompositeKeyComparator.class);

